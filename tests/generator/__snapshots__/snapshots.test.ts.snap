// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator snapshots Express routes snapshot 1`] = `
"import { Router } from 'express'
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
export const router = Router()

// GET /user
router.get('/user', async (req, res) => {
  try {
  const skip = req.query.skip !== undefined ? Number(req.query.skip) : undefined
  const take = req.query.take !== undefined ? Number(req.query.take) : undefined
    let where: any = undefined
    if (req.query.where) {
      try { where = typeof req.query.where === 'string' ? JSON.parse(req.query.where) : req.query.where } catch { return res.status(400).json({ error: 'Invalid where JSON' }) }
    }
  if (skip !== undefined && Number.isNaN(skip)) return res.status(400).json({ error: 'skip must be a number' })
  if (take !== undefined && Number.isNaN(take)) return res.status(400).json({ error: 'take must be a number' })
  const rows = await prisma.user.findMany({ where, skip, take })
    res.json(rows)
  } catch (err: any) {
    res.status(500).json({ error: err?.message || 'Server error' })
  }
})

// GET /user/:id
router.get('/user/:id', async (req, res) => {
  try {
    const id = Number(req.params.id)
  const row = await prisma.user.findUnique({ where: { id } })
    if (!row) return res.status(404).end()
    res.json(row)
  } catch (err: any) {
    res.status(500).json({ error: err?.message || 'Server error' })
  }
})

// POST /user
router.post('/user', async (req, res) => {
  try {
  // TODO(validation): derive schema from entity definition and validate body
  const created = await prisma.user.create({ data: req.body })
    res.status(201).json(created)
  } catch (err: any) {
    res.status(400).json({ error: err?.message || 'Create failed' })
  }
})

// PUT /user/:id
router.put('/user/:id', async (req, res) => {
  try {
    const id = Number(req.params.id)
  if (Number.isNaN(id)) return res.status(400).json({ error: 'id must be a number' })
  // TODO(validation): derive schema from entity definition and validate body
  const updated = await prisma.user.update({ where: { id }, data: req.body })
    res.json(updated)
  } catch (err: any) {
    res.status(400).json({ error: err?.message || 'Update failed' })
  }
})

// DELETE /user/:id
router.delete('/user/:id', async (req, res) => {
  try {
    const id = Number(req.params.id)
  if (Number.isNaN(id)) return res.status(400).json({ error: 'id must be a number' })
  await prisma.user.delete({ where: { id } })
    res.status(204).end()
  } catch (err: any) {
    res.status(400).json({ error: err?.message || 'Delete failed' })
  }
})
"
`;

exports[`Generator snapshots React page snapshot 1`] = `
"import React, { useEffect, useState } from 'react';

export default function Home() {

  const [greeting, setGreeting] = useState("Hello");



  return (
     <div>{greeting}</div> 
  );

}
"
`;
